47. Permutations II
Link: https://leetcode.com/problems/permutations-ii/description/

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        boolean[] used = new boolean[nums.length];
        backtrack(nums, new ArrayList<>(), used, result);
        return result;  
    }

    private void backtrack(int[] nums, List<Integer> current, boolean[] used, List<List<Integer>> result){
        if(current.size() == nums.length){
            result.add(new ArrayList<>(current));
            return;
        }

        for(int i = 0; i < nums.length; i++){
            // Skip already used elements
            if(used[i]) continue;
            // Skip duplicates: if same number as previous AND previous not used in this path
            if(i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) continue;

            used[i] = true;
            current.add(nums[i]);
            backtrack(nums, current, used, result);

            // Backtrack
            used[i] = false;
            current.remove(current.size() - 1);
        }
    }
}
