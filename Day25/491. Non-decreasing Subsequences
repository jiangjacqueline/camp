491. Non-decreasing Subsequences
Link: https://leetcode.com/problems/non-decreasing-subsequences/description/

class Solution {
    public List<List<Integer>> findSubsequences(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, 0, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int[] nums, int start, List<Integer> current, List<List<Integer>> result){
        if(current.size() >= 2){
            result.add(new ArrayList<>(current)); // only record subsequences with length >= 2
        }
        // To avoid duplicates at the same recursion level, use a HashSet
        Set<Integer> used = new HashSet<>();

        for(int i = start; i < nums.length; i++){
            // skip the duplicates at this level
            if(used.contains(nums[i])) continue;
        
            // Ensure non-decreasing order
            if(current.isEmpty() || nums[i] >= current.get(current.size() - 1)){
                used.add(nums[i]); // mark as used for this level

                current.add(nums[i]);
                backtrack(nums, i + 1, current, result);
                current.remove(current.size() - 1);
            }
        }
    }
}
