101. 孤岛的总面积
题目描述

给定一个由 1（陆地）和 0（水）组成的矩阵，岛屿指的是由水平或垂直方向上相邻的陆地单元格组成的区域，且完全被水域单元格包围。孤岛是那些位于矩阵内部、所有单元格都不接触边缘的岛屿。

现在你需要计算所有孤岛的总面积，岛屿面积的计算方式为组成岛屿的陆地的总数。

输入描述

第一行包含两个整数 N, M，表示矩阵的行数和列数。之后 N 行，每行包含 M 个数字，数字为 1 或者 0。

输出描述

输出一个整数，表示所有孤岛的总面积，如果不存在孤岛，则输出 0。

输入示例

4 5
1 1 0 0 0
1 1 0 0 0
0 0 1 0 0
0 0 0 1 1
输出示例：

1




import java.util.*;

public class Main {
    static int N, M;
    static int[][] grid;
    static boolean[][] visited;
    static int[] dx = {1, -1, 0, 0};
    static int[] dy = {0, 0, 1, -1};

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        M = sc.nextInt();
        grid = new int[N][M];
        visited = new boolean[N][M];

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                grid[i][j] = sc.nextInt();
            }
        }

        int totalArea = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    Result res = dfs(i, j);
                    if (!res.touchesBorder) {
                        totalArea += res.area;
                    }
                }
            }
        }

        System.out.println(totalArea);
    }

    static class Result {
        int area;
        boolean touchesBorder;

        Result(int area, boolean touchesBorder) {
            this.area = area;
            this.touchesBorder = touchesBorder;
        }
    }

    static Result dfs(int x, int y) {
        Stack<int[]> stack = new Stack<>();
        stack.push(new int[]{x, y});
        visited[x][y] = true;

        int area = 0;
        boolean touchesBorder = false;

        while (!stack.isEmpty()) {
            int[] cur = stack.pop();
            int cx = cur[0], cy = cur[1];
            area++;

            // 判断是否在边界上
            if (cx == 0 || cx == N - 1 || cy == 0 || cy == M - 1) {
                touchesBorder = true;
            }

            for (int k = 0; k < 4; k++) {
                int nx = cx + dx[k];
                int ny = cy + dy[k];
                if (nx >= 0 && nx < N && ny >= 0 && ny < M &&
                        grid[nx][ny] == 1 && !visited[nx][ny]) {
                    visited[nx][ny] = true;
                    stack.push(new int[]{nx, ny});
                }
            }
        }

        return new Result(area, touchesBorder);
    }
}
