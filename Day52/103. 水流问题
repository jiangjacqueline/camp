103. 水流问题
题目描述：

现有一个 N × M 的矩阵，每个单元格包含一个数值，这个数值代表该位置的相对高度。矩阵的左边界和上边界被认为是第一组边界，而矩阵的右边界和下边界被视为第二组边界。

矩阵模拟了一个地形，当雨水落在上面时，水会根据地形的倾斜向低处流动，但只能从较高或等高的地点流向较低或等高并且相邻（上下左右方向）的地点。我们的目标是确定那些单元格，从这些单元格出发的水可以达到第一组边界和第二组边界。

输入描述：

第一行包含两个整数 N 和 M，分别表示矩阵的行数和列数。

后续 N 行，每行包含 M 个整数，表示矩阵中的每个单元格的高度。

输出描述：

输出共有多行，每行输出两个整数，用一个空格隔开，表示可达第一组边界和第二组边界的单元格的坐标，输出顺序任意。

输入示例：

5 5
1 3 1 2 4
1 2 1 3 2
2 4 7 2 1
4 5 6 1 1
1 4 1 2 1
输出示例：

0 4
1 3
2 2
3 0
3 1
3 2
4 0
4 1

import java.util.*;

public class Main {
    static int N, M;
    static int[][] height;
    static boolean[][] reachA, reachB;
    static int[] dx = {1, -1, 0, 0};
    static int[] dy = {0, 0, 1, -1};

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        M = sc.nextInt();
        height = new int[N][M];
        reachA = new boolean[N][M];
        reachB = new boolean[N][M];

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                height[i][j] = sc.nextInt();
            }
        }

        // 第一组边界: 上边界 + 左边界
        for (int i = 0; i < N; i++) dfs(i, 0, reachA);
        for (int j = 0; j < M; j++) dfs(0, j, reachA);

        // 第二组边界: 下边界 + 右边界
        for (int i = 0; i < N; i++) dfs(i, M - 1, reachB);
        for (int j = 0; j < M; j++) dfs(N - 1, j, reachB);

        // 输出交集
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (reachA[i][j] && reachB[i][j]) {
                    System.out.println(i + " " + j);
                }
            }
        }
    }

    static void dfs(int x, int y, boolean[][] visited) {
        if (visited[x][y]) return;
        visited[x][y] = true;

        for (int k = 0; k < 4; k++) {
            int nx = x + dx[k];
            int ny = y + dy[k];
            if (nx >= 0 && nx < N && ny >= 0 && ny < M) {
                // 反向流动: 只能走到比自己高或相等的地方
                if (height[nx][ny] >= height[x][y]) {
                    dfs(nx, ny, visited);
                }
            }
        }
    }
}

