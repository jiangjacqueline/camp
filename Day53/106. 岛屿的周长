106. 岛屿的周长
题目描述

给定一个由 1（陆地）和 0（水）组成的矩阵，岛屿是被水包围，并且通过水平方向或垂直方向上相邻的陆地连接而成的。

你可以假设矩阵外均被水包围。在矩阵中恰好拥有一个岛屿，假设组成岛屿的陆地边长都为 1，请计算岛屿的周长。岛屿内部没有水域。

输入描述

第一行包含两个整数 N, M，表示矩阵的行数和列数。之后 N 行，每行包含 M 个数字，数字为 1 或者 0，表示岛屿的单元格。

输出描述

输出一个整数，表示岛屿的周长。

输入示例

5 5
0 0 0 0 0
0 1 0 1 0
0 1 1 1 0
0 1 1 1 0
0 0 0 0 0
输出示例

14

方法1：线性扫描（推荐）
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] grid = new int[N][M];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                grid[i][j] = sc.nextInt();
            }
        }

        int perimeter = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (grid[i][j] == 1) {
                    perimeter += 4;
                    if (i > 0 && grid[i - 1][j] == 1) perimeter -= 2; // 与上方共享边
                    if (j > 0 && grid[i][j - 1] == 1) perimeter -= 2; // 与左方共享边
                }
            }
        }

        System.out.println(perimeter);
    }
}


方法2：DFS
import java.util.*;

public class Main {
    static int[][] grid;
    static int N, M;
    static boolean[][] visited;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        M = sc.nextInt();
        grid = new int[N][M];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) grid[i][j] = sc.nextInt();
        }

        visited = new boolean[N][M];
        int perimeter = 0;
        boolean found = false;
        for (int i = 0; i < N && !found; i++) {
            for (int j = 0; j < M && !found; j++) {
                if (grid[i][j] == 1) {
                    perimeter = dfs(i, j);
                    found = true;
                }
            }
        }
        System.out.println(perimeter);
    }

    private static int dfs(int i, int j) {
        if (i < 0 || i >= N || j < 0 || j >= M) return 1; // 越界视为水 -> 边贡献1
        if (grid[i][j] == 0) return 1; // 水 -> 该方向为岛屿边界
        if (visited[i][j]) return 0; // 已访问，不重复计数

        visited[i][j] = true;
        int peri = 0;
        peri += dfs(i - 1, j);
        peri += dfs(i + 1, j);
        peri += dfs(i, j - 1);
        peri += dfs(i, j + 1);
        return peri;
    }
}
