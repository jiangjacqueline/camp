216. Combination Sum III
Link: https://leetcode.com/problems/combination-sum-iii/description/

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(k, n, 1, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int k, int target, int start, List<Integer> current, List<List<Integer>> result){
        if(current.size() == k && target == 0){
            result.add(new ArrayList<>(current));
            return;
        }
        // If we exceed size or sum, stop exploring
        if(current.size() > k || target < 0){
            return;
        }
        for(int i = start; i <= 9; i++){
            current.add(i); // choose
            backtrack(k, target - i, i + 1, current, result);
            current.remove(current.size() - 1);
        }
    }
}
