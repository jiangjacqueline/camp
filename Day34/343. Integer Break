343. Integer Break
Link: https://leetcode.com/problems/integer-break/description/

// DP Solution
// Time: O(n²)
// Space: O(n)

class Solution {
    public int integerBreak(int n) {
        if(n == 2) return 1;
        if(n == 3) return 2;

        int [] dp = new int[n + 1];
        dp[2] = 1;

        for(int i = 3; i <= n; i++){
            for(int j = 1; j < i; j++){
                dp[i] = Math.max(dp[i], Math.max(j * (i - j), j * dp[i - j]));
            }
        }
        return dp[n];
    }
}

// Greedy
// Time: O(n/3) ≈ O(n)
// Space: O(1)
class Solution {
    public int integerBreak(int n) {
        if(n == 2) return 1;
        if(n == 3) return 2;

        int product = 1;
        while(n > 4){
            product *= 3;
            n -= 3;
        }
        return product * n;
    }
}
