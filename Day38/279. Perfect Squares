279. Perfect Squares
Link: https://leetcode.com/problems/perfect-squares/description/

class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];

        // manually fill with Integer.MAX_VALUE
        for(int i = 0; i <= n; i++){
            dp[i] = Integer.MAX_VALUE;
        }

        dp[0] = 0;

        for(int i = 0; i <= n; i++){ // traverse bag
            for(int j = 1; j * j <= i; j++){ // traverse items
                if(dp[i - j * j] != Integer.MAX_VALUE){ // Avoid overflow
                    dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
                }
            }
        }
        return dp[n];
    }
}

class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        int max = Integer.MAX_VALUE;

        Arrays.fill(dp, max);
        dp[0] = 0;

        for(int i = 0; i <= n; i++){ // traverse bag
            for(int j = 1; j * j <= i; j++){ // traverse items
                if(dp[i - j * j] != Integer.MAX_VALUE){ // Avoid overflow
                    dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
                }
            }
        }
        return dp[n];
    }
}
