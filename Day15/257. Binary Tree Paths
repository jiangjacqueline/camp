257. Binary Tree Paths
Link: https://leetcode.com/problems/binary-tree-paths/description/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList<>();
        if(root == null) return result;
        dfs(root, "", result);
        return result;
    }

    private void dfs(TreeNode node, String path, List<String> result){
        if(node == null) return;

        // build current path
        if(path.isEmpty()){
            path += node.val;
        }else{
            path += "->" + node.val;
        }

        // if leaf, add to result
        if(node.left == null && node.right == null){
            result.add(path);
            return;
        }

        // recurse the children
        dfs(node.left, path, result);
        dfs(node.right, path, result);
    }
}
